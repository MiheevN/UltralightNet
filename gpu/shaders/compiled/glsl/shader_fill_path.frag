#version 330
#ifdef GL_ARB_shading_language_420pack
#extension GL_ARB_shading_language_420pack : require
#endif

layout(binding = 0, std140) uniform Uniforms
{
    vec4 State;
    mat4 Transform;
    vec4 Scalar4[2];
    vec4 Vector[8];
    uint ClipSize;
    mat4 Clip[8];
} _590;

in vec2 ex_ObjectCoord;
layout(location = 0) out vec4 out_Color;
in vec4 ex_Color;

void main()
{
    out_Color = ex_Color;
    for (uint _2210 = 0u; _2210 < _590.ClipSize; _2210++)
    {
        vec4 _804 = floor(_590.Clip[_2210][1] * vec4(1.52587890625e-05));
        vec4 _809 = floor(_590.Clip[_2210][1] - (_804 * 65536.0));
        vec2 _772 = (((_590.Clip[_2210][2].xy * ex_ObjectCoord.x) + (_590.Clip[_2210][2].zw * ex_ObjectCoord.y)) + _590.Clip[_2210][3].xy) - _590.Clip[_2210][0].xy;
        float _2255;
        do
        {
            vec2 _841 = _590.Clip[_2210][0].zw * 0.5;
            float _843 = _841.x;
            float _844 = -_843;
            float _846 = _804.x;
            float _847 = _844 + _846;
            float _849 = _841.y;
            float _850 = -_849;
            float _852 = _809.x;
            float _853 = _850 + _852;
            vec2 _857 = _772 - vec2(_847, _853);
            bool _863 = (_846 * _852) > 0.0;
            bool _871;
            if (_863)
            {
                _871 = _772.x < _847;
            }
            else
            {
                _871 = _863;
            }
            bool _879;
            if (_871)
            {
                _879 = _772.y <= _853;
            }
            else
            {
                _879 = _871;
            }
            if (_879)
            {
                vec2 _885 = vec2(_846, _852);
                float _2254;
                do
                {
                    if (abs(_846 - _852) < 0.100000001490116119384765625)
                    {
                        _2254 = length(_857) - _846;
                        break;
                    }
                    vec2 _1076 = abs(_857);
                    vec2 _2249;
                    vec2 _2250;
                    if (_1076.x > _1076.y)
                    {
                        _2250 = _1076.yx;
                        _2249 = _885.yx;
                    }
                    else
                    {
                        _2250 = _1076;
                        _2249 = _885;
                    }
                    float _1098 = (_2249.y * _2249.y) - (_2249.x * _2249.x);
                    float _1105 = (_2249.x * _2250.x) / _1098;
                    float _1112 = (_2249.y * _2250.y) / _1098;
                    float _1115 = _1105 * _1105;
                    float _1118 = _1112 * _1112;
                    float _1122 = (_1115 + _1118) - 1.0;
                    float _1123 = _1122 * 0.3333333432674407958984375;
                    float _1128 = (_1123 * _1123) * _1123;
                    float _1132 = _1115 * _1118;
                    float _1134 = _1128 + (_1132 * 2.0);
                    float _1139 = _1128 + _1132;
                    float _1144 = _1105 + (_1105 * _1118);
                    float _2251;
                    if (_1139 < 0.0)
                    {
                        float _1152 = acos(_1134 / _1128) * 0.3333333432674407958984375;
                        float _1154 = cos(_1152);
                        float _1157 = sin(_1152) * 1.73205077648162841796875;
                        float _1159 = _1122 * (-0.3333333432674407958984375);
                        float _1167 = sqrt((_1159 * ((_1154 + _1157) + 2.0)) + _1115);
                        float _1177 = sqrt((_1159 * ((_1154 - _1157) + 2.0)) + _1115);
                        _2251 = (((_1177 + (sign(_1098) * _1167)) + (abs(_1144) / (_1167 * _1177))) - _1105) * 0.5;
                    }
                    else
                    {
                        float _1201 = ((2.0 * _1105) * _1112) * sqrt(_1139);
                        float _1204 = _1134 + _1201;
                        float _1211 = sign(_1204) * pow(abs(_1204), 0.3333333432674407958984375);
                        float _1214 = _1134 - _1201;
                        float _1221 = sign(_1214) * pow(abs(_1214), 0.3333333432674407958984375);
                        float _1231 = (((-_1211) - _1221) - (_1122 * 1.33333337306976318359375)) + (2.0 * _1115);
                        float _1235 = (_1211 - _1221) * 1.73205077648162841796875;
                        float _1243 = sqrt((_1231 * _1231) + (_1235 * _1235));
                        _2251 = (((_1235 / sqrt(_1243 - _1231)) + ((2.0 * _1144) / _1243)) - _1105) * 0.5;
                    }
                    float _1272 = _2249.y * sqrt(1.0 - (_2251 * _2251));
                    _2254 = length(vec2(_2249.x * _2251, _1272) - _2250) * sign(_2250.y - _1272);
                    break;
                } while(false);
                _2255 = _2254;
                break;
            }
            float _892 = _804.y;
            float _893 = _843 - _892;
            float _898 = _809.y;
            float _899 = _850 + _898;
            vec2 _903 = _772 - vec2(_893, _899);
            bool _909 = (_892 * _898) > 0.0;
            bool _917;
            if (_909)
            {
                _917 = _772.x >= _893;
            }
            else
            {
                _917 = _909;
            }
            bool _925;
            if (_917)
            {
                _925 = _772.y <= _899;
            }
            else
            {
                _925 = _917;
            }
            if (_925)
            {
                vec2 _931 = vec2(_892, _898);
                float _2246;
                do
                {
                    if (abs(_892 - _898) < 0.100000001490116119384765625)
                    {
                        _2246 = length(_903) - _892;
                        break;
                    }
                    vec2 _1332 = abs(_903);
                    vec2 _2241;
                    vec2 _2242;
                    if (_1332.x > _1332.y)
                    {
                        _2242 = _1332.yx;
                        _2241 = _931.yx;
                    }
                    else
                    {
                        _2242 = _1332;
                        _2241 = _931;
                    }
                    float _1354 = (_2241.y * _2241.y) - (_2241.x * _2241.x);
                    float _1361 = (_2241.x * _2242.x) / _1354;
                    float _1368 = (_2241.y * _2242.y) / _1354;
                    float _1371 = _1361 * _1361;
                    float _1374 = _1368 * _1368;
                    float _1378 = (_1371 + _1374) - 1.0;
                    float _1379 = _1378 * 0.3333333432674407958984375;
                    float _1384 = (_1379 * _1379) * _1379;
                    float _1388 = _1371 * _1374;
                    float _1390 = _1384 + (_1388 * 2.0);
                    float _1395 = _1384 + _1388;
                    float _1400 = _1361 + (_1361 * _1374);
                    float _2243;
                    if (_1395 < 0.0)
                    {
                        float _1408 = acos(_1390 / _1384) * 0.3333333432674407958984375;
                        float _1410 = cos(_1408);
                        float _1413 = sin(_1408) * 1.73205077648162841796875;
                        float _1415 = _1378 * (-0.3333333432674407958984375);
                        float _1423 = sqrt((_1415 * ((_1410 + _1413) + 2.0)) + _1371);
                        float _1433 = sqrt((_1415 * ((_1410 - _1413) + 2.0)) + _1371);
                        _2243 = (((_1433 + (sign(_1354) * _1423)) + (abs(_1400) / (_1423 * _1433))) - _1361) * 0.5;
                    }
                    else
                    {
                        float _1457 = ((2.0 * _1361) * _1368) * sqrt(_1395);
                        float _1460 = _1390 + _1457;
                        float _1467 = sign(_1460) * pow(abs(_1460), 0.3333333432674407958984375);
                        float _1470 = _1390 - _1457;
                        float _1477 = sign(_1470) * pow(abs(_1470), 0.3333333432674407958984375);
                        float _1487 = (((-_1467) - _1477) - (_1378 * 1.33333337306976318359375)) + (2.0 * _1371);
                        float _1491 = (_1467 - _1477) * 1.73205077648162841796875;
                        float _1499 = sqrt((_1487 * _1487) + (_1491 * _1491));
                        _2243 = (((_1491 / sqrt(_1499 - _1487)) + ((2.0 * _1400) / _1499)) - _1361) * 0.5;
                    }
                    float _1528 = _2241.y * sqrt(1.0 - (_2243 * _2243));
                    _2246 = length(vec2(_2241.x * _2243, _1528) - _2242) * sign(_2242.y - _1528);
                    break;
                } while(false);
                _2255 = _2246;
                break;
            }
            float _938 = _804.z;
            float _939 = _843 - _938;
            float _943 = _809.z;
            float _944 = _849 - _943;
            vec2 _948 = _772 - vec2(_939, _944);
            bool _954 = (_938 * _943) > 0.0;
            bool _962;
            if (_954)
            {
                _962 = _772.x >= _939;
            }
            else
            {
                _962 = _954;
            }
            bool _970;
            if (_962)
            {
                _970 = _772.y >= _944;
            }
            else
            {
                _970 = _962;
            }
            if (_970)
            {
                vec2 _976 = vec2(_938, _943);
                float _2238;
                do
                {
                    if (abs(_938 - _943) < 0.100000001490116119384765625)
                    {
                        _2238 = length(_948) - _938;
                        break;
                    }
                    vec2 _1588 = abs(_948);
                    vec2 _2233;
                    vec2 _2234;
                    if (_1588.x > _1588.y)
                    {
                        _2234 = _1588.yx;
                        _2233 = _976.yx;
                    }
                    else
                    {
                        _2234 = _1588;
                        _2233 = _976;
                    }
                    float _1610 = (_2233.y * _2233.y) - (_2233.x * _2233.x);
                    float _1617 = (_2233.x * _2234.x) / _1610;
                    float _1624 = (_2233.y * _2234.y) / _1610;
                    float _1627 = _1617 * _1617;
                    float _1630 = _1624 * _1624;
                    float _1634 = (_1627 + _1630) - 1.0;
                    float _1635 = _1634 * 0.3333333432674407958984375;
                    float _1640 = (_1635 * _1635) * _1635;
                    float _1644 = _1627 * _1630;
                    float _1646 = _1640 + (_1644 * 2.0);
                    float _1651 = _1640 + _1644;
                    float _1656 = _1617 + (_1617 * _1630);
                    float _2235;
                    if (_1651 < 0.0)
                    {
                        float _1664 = acos(_1646 / _1640) * 0.3333333432674407958984375;
                        float _1666 = cos(_1664);
                        float _1669 = sin(_1664) * 1.73205077648162841796875;
                        float _1671 = _1634 * (-0.3333333432674407958984375);
                        float _1679 = sqrt((_1671 * ((_1666 + _1669) + 2.0)) + _1627);
                        float _1689 = sqrt((_1671 * ((_1666 - _1669) + 2.0)) + _1627);
                        _2235 = (((_1689 + (sign(_1610) * _1679)) + (abs(_1656) / (_1679 * _1689))) - _1617) * 0.5;
                    }
                    else
                    {
                        float _1713 = ((2.0 * _1617) * _1624) * sqrt(_1651);
                        float _1716 = _1646 + _1713;
                        float _1723 = sign(_1716) * pow(abs(_1716), 0.3333333432674407958984375);
                        float _1726 = _1646 - _1713;
                        float _1733 = sign(_1726) * pow(abs(_1726), 0.3333333432674407958984375);
                        float _1743 = (((-_1723) - _1733) - (_1634 * 1.33333337306976318359375)) + (2.0 * _1627);
                        float _1747 = (_1723 - _1733) * 1.73205077648162841796875;
                        float _1755 = sqrt((_1743 * _1743) + (_1747 * _1747));
                        _2235 = (((_1747 / sqrt(_1755 - _1743)) + ((2.0 * _1656) / _1755)) - _1617) * 0.5;
                    }
                    float _1784 = _2233.y * sqrt(1.0 - (_2235 * _2235));
                    _2238 = length(vec2(_2233.x * _2235, _1784) - _2234) * sign(_2234.y - _1784);
                    break;
                } while(false);
                _2255 = _2238;
                break;
            }
            float _984 = _804.w;
            float _985 = _844 + _984;
            float _989 = _809.w;
            float _990 = _849 - _989;
            vec2 _994 = _772 - vec2(_985, _990);
            bool _1000 = (_984 * _989) > 0.0;
            bool _1008;
            if (_1000)
            {
                _1008 = _772.x < _985;
            }
            else
            {
                _1008 = _1000;
            }
            bool _1016;
            if (_1008)
            {
                _1016 = _772.y > _990;
            }
            else
            {
                _1016 = _1008;
            }
            if (_1016)
            {
                vec2 _1022 = vec2(_984, _989);
                float _2230;
                do
                {
                    if (abs(_984 - _989) < 0.100000001490116119384765625)
                    {
                        _2230 = length(_994) - _984;
                        break;
                    }
                    vec2 _1844 = abs(_994);
                    vec2 _2225;
                    vec2 _2226;
                    if (_1844.x > _1844.y)
                    {
                        _2226 = _1844.yx;
                        _2225 = _1022.yx;
                    }
                    else
                    {
                        _2226 = _1844;
                        _2225 = _1022;
                    }
                    float _1866 = (_2225.y * _2225.y) - (_2225.x * _2225.x);
                    float _1873 = (_2225.x * _2226.x) / _1866;
                    float _1880 = (_2225.y * _2226.y) / _1866;
                    float _1883 = _1873 * _1873;
                    float _1886 = _1880 * _1880;
                    float _1890 = (_1883 + _1886) - 1.0;
                    float _1891 = _1890 * 0.3333333432674407958984375;
                    float _1896 = (_1891 * _1891) * _1891;
                    float _1900 = _1883 * _1886;
                    float _1902 = _1896 + (_1900 * 2.0);
                    float _1907 = _1896 + _1900;
                    float _1912 = _1873 + (_1873 * _1886);
                    float _2227;
                    if (_1907 < 0.0)
                    {
                        float _1920 = acos(_1902 / _1896) * 0.3333333432674407958984375;
                        float _1922 = cos(_1920);
                        float _1925 = sin(_1920) * 1.73205077648162841796875;
                        float _1927 = _1890 * (-0.3333333432674407958984375);
                        float _1935 = sqrt((_1927 * ((_1922 + _1925) + 2.0)) + _1883);
                        float _1945 = sqrt((_1927 * ((_1922 - _1925) + 2.0)) + _1883);
                        _2227 = (((_1945 + (sign(_1866) * _1935)) + (abs(_1912) / (_1935 * _1945))) - _1873) * 0.5;
                    }
                    else
                    {
                        float _1969 = ((2.0 * _1873) * _1880) * sqrt(_1907);
                        float _1972 = _1902 + _1969;
                        float _1979 = sign(_1972) * pow(abs(_1972), 0.3333333432674407958984375);
                        float _1982 = _1902 - _1969;
                        float _1989 = sign(_1982) * pow(abs(_1982), 0.3333333432674407958984375);
                        float _1999 = (((-_1979) - _1989) - (_1890 * 1.33333337306976318359375)) + (2.0 * _1883);
                        float _2003 = (_1979 - _1989) * 1.73205077648162841796875;
                        float _2011 = sqrt((_1999 * _1999) + (_2003 * _2003));
                        _2227 = (((_2003 / sqrt(_2011 - _1999)) + ((2.0 * _1912) / _2011)) - _1873) * 0.5;
                    }
                    float _2040 = _2225.y * sqrt(1.0 - (_2227 * _2227));
                    _2230 = length(vec2(_2225.x * _2227, _2040) - _2226) * sign(_2226.y - _2040);
                    break;
                } while(false);
                _2255 = _2230;
                break;
            }
            vec2 _2061 = abs(_772) - _841;
            _2255 = min(max(_2061.x, _2061.y), 0.0) + length(max(_2061, vec2(0.0)));
            break;
        } while(false);
        float _2082 = smoothstep(-0.3540000021457672119140625, 0.3540000021457672119140625, -(_2255 * ((!(_590.Clip[_2210][3].z == 0.0)) ? (-1.0) : 1.0)));
        out_Color = vec4(out_Color.xyz * _2082, out_Color.w * _2082);
    }
}

