#version 330
#ifdef GL_ARB_shading_language_420pack
#extension GL_ARB_shading_language_420pack : require
#endif

layout(binding = 0, std140) uniform Uniforms
{
    vec4 State;
    mat4 Transform;
    vec4 Scalar4[2];
    vec4 Vector[8];
    uint ClipSize;
    mat4 Clip[8];
} _187;

layout(binding = 0) uniform sampler2D Texture1;
layout(binding = 0) uniform sampler2D Texture2;

in vec4 ex_Data0;
in vec4 ex_Data1;
in vec4 ex_Data2;
in vec4 ex_Data3;
in vec4 ex_Data4;
in vec4 ex_Data5;
in vec4 ex_Data6;
layout(location = 0) out vec4 out_Color;
in vec4 ex_Color;
in vec2 ex_ObjectCoord;
in vec2 ex_TexCoord;

vec4 _10757;

void main()
{
    switch (uint(ex_Data0.x + 0.5))
    {
        case 0u:
        {
            out_Color = ex_Color;
            break;
        }
        case 1u:
        {
            out_Color = texture(Texture1, ex_TexCoord) * ex_Color;
            break;
        }
        case 2u:
        {
            out_Color = texture(Texture1, (fract((((_187.Vector[2].xy * ex_ObjectCoord.x) + (_187.Vector[2].zw * ex_ObjectCoord.y)) + _187.Vector[3].xy) / _187.Vector[1].zw) * (_187.Vector[0].zw - _187.Vector[0].xy)) + _187.Vector[0].xy) * ex_Color;
            break;
        }
        case 3u:
        {
            int _2446 = int(uint(ex_Data0.y + 0.5));
            float _10951;
            if (uint(ex_Data0.z + 0.5) != 0u)
            {
                float _2461 = ex_Data1.w - ex_Data1.z;
                _10951 = clamp((distance(ex_TexCoord, ex_Data1.xy) / _2461) - (ex_Data1.z / _2461), 0.0, 1.0);
            }
            else
            {
                vec2 _2473 = ex_Data1.zw - ex_Data1.xy;
                _10951 = clamp(dot(ex_TexCoord - ex_Data1.xy, _2473) / dot(_2473, _2473), 0.0, 1.0);
            }
            out_Color = mix(ex_Data3, ex_Data4, vec4(clamp((_10951 - ex_Data2.x) / (ex_Data2.y - ex_Data2.x), 0.0, 1.0)));
            if (_2446 > 2)
            {
                out_Color = mix(out_Color, ex_Data5, vec4(clamp((_10951 - ex_Data2.y) / (ex_Data2.z - ex_Data2.y), 0.0, 1.0)));
                if (_2446 > 3)
                {
                    out_Color = mix(out_Color, ex_Data6, vec4(clamp((_10951 - ex_Data2.z) / (ex_Data2.w - ex_Data2.z), 0.0, 1.0)));
                    if (_2446 > 4)
                    {
                        out_Color = mix(out_Color, _187.Vector[0u], vec4(clamp((_10951 - ex_Data2.w) / (_187.Scalar4[0].x - ex_Data2.w), 0.0, 1.0)));
                        if (_2446 > 5)
                        {
                            out_Color = mix(out_Color, _187.Vector[1u], vec4(clamp((_10951 - _187.Scalar4[0].x) / (_187.Scalar4[0].y - _187.Scalar4[0].x), 0.0, 1.0)));
                            if (_2446 > 6)
                            {
                                out_Color = mix(out_Color, _187.Vector[2u], vec4(clamp((_10951 - _187.Scalar4[0].y) / (_187.Scalar4[0].z - _187.Scalar4[0].y), 0.0, 1.0)));
                            }
                        }
                    }
                }
            }
            break;
        }
        case 7u:
        {
            vec2 _3169 = (ex_TexCoord - vec2(0.5)) * ex_Data0.zw;
            float _10895;
            do
            {
                vec2 _3215 = ex_Data0.zw * 0.5;
                float _3217 = _3215.x;
                float _3218 = -_3217;
                float _3221 = _3218 + ex_Data1.x;
                float _3223 = _3215.y;
                float _3224 = -_3223;
                float _3227 = _3224 + ex_Data2.x;
                vec2 _3231 = _3169 - vec2(_3221, _3227);
                bool _3237 = (ex_Data1.x * ex_Data2.x) > 0.0;
                bool _3245;
                if (_3237)
                {
                    _3245 = _3169.x < _3221;
                }
                else
                {
                    _3245 = _3237;
                }
                bool _3253;
                if (_3245)
                {
                    _3253 = _3169.y <= _3227;
                }
                else
                {
                    _3253 = _3245;
                }
                if (_3253)
                {
                    vec2 _3259 = vec2(ex_Data1.x, ex_Data2.x);
                    float _10894;
                    do
                    {
                        if (abs(ex_Data1.x - ex_Data2.x) < 0.100000001490116119384765625)
                        {
                            _10894 = length(_3231) - ex_Data1.x;
                            break;
                        }
                        vec2 _3450 = abs(_3231);
                        vec2 _10889;
                        vec2 _10890;
                        if (_3450.x > _3450.y)
                        {
                            _10890 = _3450.yx;
                            _10889 = _3259.yx;
                        }
                        else
                        {
                            _10890 = _3450;
                            _10889 = _3259;
                        }
                        float _3472 = (_10889.y * _10889.y) - (_10889.x * _10889.x);
                        float _3479 = (_10889.x * _10890.x) / _3472;
                        float _3486 = (_10889.y * _10890.y) / _3472;
                        float _3489 = _3479 * _3479;
                        float _3492 = _3486 * _3486;
                        float _3496 = (_3489 + _3492) - 1.0;
                        float _3497 = _3496 * 0.3333333432674407958984375;
                        float _3502 = (_3497 * _3497) * _3497;
                        float _3506 = _3489 * _3492;
                        float _3508 = _3502 + (_3506 * 2.0);
                        float _3513 = _3502 + _3506;
                        float _3518 = _3479 + (_3479 * _3492);
                        float _10891;
                        if (_3513 < 0.0)
                        {
                            float _3526 = acos(_3508 / _3502) * 0.3333333432674407958984375;
                            float _3528 = cos(_3526);
                            float _3531 = sin(_3526) * 1.73205077648162841796875;
                            float _3533 = _3496 * (-0.3333333432674407958984375);
                            float _3541 = sqrt((_3533 * ((_3528 + _3531) + 2.0)) + _3489);
                            float _3551 = sqrt((_3533 * ((_3528 - _3531) + 2.0)) + _3489);
                            _10891 = (((_3551 + (sign(_3472) * _3541)) + (abs(_3518) / (_3541 * _3551))) - _3479) * 0.5;
                        }
                        else
                        {
                            float _3575 = ((2.0 * _3479) * _3486) * sqrt(_3513);
                            float _3578 = _3508 + _3575;
                            float _3585 = sign(_3578) * pow(abs(_3578), 0.3333333432674407958984375);
                            float _3588 = _3508 - _3575;
                            float _3595 = sign(_3588) * pow(abs(_3588), 0.3333333432674407958984375);
                            float _3605 = (((-_3585) - _3595) - (_3496 * 1.33333337306976318359375)) + (2.0 * _3489);
                            float _3609 = (_3585 - _3595) * 1.73205077648162841796875;
                            float _3617 = sqrt((_3605 * _3605) + (_3609 * _3609));
                            _10891 = (((_3609 / sqrt(_3617 - _3605)) + ((2.0 * _3518) / _3617)) - _3479) * 0.5;
                        }
                        float _3646 = _10889.y * sqrt(1.0 - (_10891 * _10891));
                        _10894 = length(vec2(_10889.x * _10891, _3646) - _10890) * sign(_10890.y - _3646);
                        break;
                    } while(false);
                    _10895 = _10894;
                    break;
                }
                float _3267 = _3217 - ex_Data1.y;
                float _3273 = _3224 + ex_Data2.y;
                vec2 _3277 = _3169 - vec2(_3267, _3273);
                bool _3283 = (ex_Data1.y * ex_Data2.y) > 0.0;
                bool _3291;
                if (_3283)
                {
                    _3291 = _3169.x >= _3267;
                }
                else
                {
                    _3291 = _3283;
                }
                bool _3299;
                if (_3291)
                {
                    _3299 = _3169.y <= _3273;
                }
                else
                {
                    _3299 = _3291;
                }
                if (_3299)
                {
                    vec2 _3305 = vec2(ex_Data1.y, ex_Data2.y);
                    float _10886;
                    do
                    {
                        if (abs(ex_Data1.y - ex_Data2.y) < 0.100000001490116119384765625)
                        {
                            _10886 = length(_3277) - ex_Data1.y;
                            break;
                        }
                        vec2 _3706 = abs(_3277);
                        vec2 _10881;
                        vec2 _10882;
                        if (_3706.x > _3706.y)
                        {
                            _10882 = _3706.yx;
                            _10881 = _3305.yx;
                        }
                        else
                        {
                            _10882 = _3706;
                            _10881 = _3305;
                        }
                        float _3728 = (_10881.y * _10881.y) - (_10881.x * _10881.x);
                        float _3735 = (_10881.x * _10882.x) / _3728;
                        float _3742 = (_10881.y * _10882.y) / _3728;
                        float _3745 = _3735 * _3735;
                        float _3748 = _3742 * _3742;
                        float _3752 = (_3745 + _3748) - 1.0;
                        float _3753 = _3752 * 0.3333333432674407958984375;
                        float _3758 = (_3753 * _3753) * _3753;
                        float _3762 = _3745 * _3748;
                        float _3764 = _3758 + (_3762 * 2.0);
                        float _3769 = _3758 + _3762;
                        float _3774 = _3735 + (_3735 * _3748);
                        float _10883;
                        if (_3769 < 0.0)
                        {
                            float _3782 = acos(_3764 / _3758) * 0.3333333432674407958984375;
                            float _3784 = cos(_3782);
                            float _3787 = sin(_3782) * 1.73205077648162841796875;
                            float _3789 = _3752 * (-0.3333333432674407958984375);
                            float _3797 = sqrt((_3789 * ((_3784 + _3787) + 2.0)) + _3745);
                            float _3807 = sqrt((_3789 * ((_3784 - _3787) + 2.0)) + _3745);
                            _10883 = (((_3807 + (sign(_3728) * _3797)) + (abs(_3774) / (_3797 * _3807))) - _3735) * 0.5;
                        }
                        else
                        {
                            float _3831 = ((2.0 * _3735) * _3742) * sqrt(_3769);
                            float _3834 = _3764 + _3831;
                            float _3841 = sign(_3834) * pow(abs(_3834), 0.3333333432674407958984375);
                            float _3844 = _3764 - _3831;
                            float _3851 = sign(_3844) * pow(abs(_3844), 0.3333333432674407958984375);
                            float _3861 = (((-_3841) - _3851) - (_3752 * 1.33333337306976318359375)) + (2.0 * _3745);
                            float _3865 = (_3841 - _3851) * 1.73205077648162841796875;
                            float _3873 = sqrt((_3861 * _3861) + (_3865 * _3865));
                            _10883 = (((_3865 / sqrt(_3873 - _3861)) + ((2.0 * _3774) / _3873)) - _3735) * 0.5;
                        }
                        float _3902 = _10881.y * sqrt(1.0 - (_10883 * _10883));
                        _10886 = length(vec2(_10881.x * _10883, _3902) - _10882) * sign(_10882.y - _3902);
                        break;
                    } while(false);
                    _10895 = _10886;
                    break;
                }
                float _3313 = _3217 - ex_Data1.z;
                float _3318 = _3223 - ex_Data2.z;
                vec2 _3322 = _3169 - vec2(_3313, _3318);
                bool _3328 = (ex_Data1.z * ex_Data2.z) > 0.0;
                bool _3336;
                if (_3328)
                {
                    _3336 = _3169.x >= _3313;
                }
                else
                {
                    _3336 = _3328;
                }
                bool _3344;
                if (_3336)
                {
                    _3344 = _3169.y >= _3318;
                }
                else
                {
                    _3344 = _3336;
                }
                if (_3344)
                {
                    vec2 _3350 = vec2(ex_Data1.z, ex_Data2.z);
                    float _10878;
                    do
                    {
                        if (abs(ex_Data1.z - ex_Data2.z) < 0.100000001490116119384765625)
                        {
                            _10878 = length(_3322) - ex_Data1.z;
                            break;
                        }
                        vec2 _3962 = abs(_3322);
                        vec2 _10873;
                        vec2 _10874;
                        if (_3962.x > _3962.y)
                        {
                            _10874 = _3962.yx;
                            _10873 = _3350.yx;
                        }
                        else
                        {
                            _10874 = _3962;
                            _10873 = _3350;
                        }
                        float _3984 = (_10873.y * _10873.y) - (_10873.x * _10873.x);
                        float _3991 = (_10873.x * _10874.x) / _3984;
                        float _3998 = (_10873.y * _10874.y) / _3984;
                        float _4001 = _3991 * _3991;
                        float _4004 = _3998 * _3998;
                        float _4008 = (_4001 + _4004) - 1.0;
                        float _4009 = _4008 * 0.3333333432674407958984375;
                        float _4014 = (_4009 * _4009) * _4009;
                        float _4018 = _4001 * _4004;
                        float _4020 = _4014 + (_4018 * 2.0);
                        float _4025 = _4014 + _4018;
                        float _4030 = _3991 + (_3991 * _4004);
                        float _10875;
                        if (_4025 < 0.0)
                        {
                            float _4038 = acos(_4020 / _4014) * 0.3333333432674407958984375;
                            float _4040 = cos(_4038);
                            float _4043 = sin(_4038) * 1.73205077648162841796875;
                            float _4045 = _4008 * (-0.3333333432674407958984375);
                            float _4053 = sqrt((_4045 * ((_4040 + _4043) + 2.0)) + _4001);
                            float _4063 = sqrt((_4045 * ((_4040 - _4043) + 2.0)) + _4001);
                            _10875 = (((_4063 + (sign(_3984) * _4053)) + (abs(_4030) / (_4053 * _4063))) - _3991) * 0.5;
                        }
                        else
                        {
                            float _4087 = ((2.0 * _3991) * _3998) * sqrt(_4025);
                            float _4090 = _4020 + _4087;
                            float _4097 = sign(_4090) * pow(abs(_4090), 0.3333333432674407958984375);
                            float _4100 = _4020 - _4087;
                            float _4107 = sign(_4100) * pow(abs(_4100), 0.3333333432674407958984375);
                            float _4117 = (((-_4097) - _4107) - (_4008 * 1.33333337306976318359375)) + (2.0 * _4001);
                            float _4121 = (_4097 - _4107) * 1.73205077648162841796875;
                            float _4129 = sqrt((_4117 * _4117) + (_4121 * _4121));
                            _10875 = (((_4121 / sqrt(_4129 - _4117)) + ((2.0 * _4030) / _4129)) - _3991) * 0.5;
                        }
                        float _4158 = _10873.y * sqrt(1.0 - (_10875 * _10875));
                        _10878 = length(vec2(_10873.x * _10875, _4158) - _10874) * sign(_10874.y - _4158);
                        break;
                    } while(false);
                    _10895 = _10878;
                    break;
                }
                float _3359 = _3218 + ex_Data1.w;
                float _3364 = _3223 - ex_Data2.w;
                vec2 _3368 = _3169 - vec2(_3359, _3364);
                bool _3374 = (ex_Data1.w * ex_Data2.w) > 0.0;
                bool _3382;
                if (_3374)
                {
                    _3382 = _3169.x < _3359;
                }
                else
                {
                    _3382 = _3374;
                }
                bool _3390;
                if (_3382)
                {
                    _3390 = _3169.y > _3364;
                }
                else
                {
                    _3390 = _3382;
                }
                if (_3390)
                {
                    vec2 _3396 = vec2(ex_Data1.w, ex_Data2.w);
                    float _10870;
                    do
                    {
                        if (abs(ex_Data1.w - ex_Data2.w) < 0.100000001490116119384765625)
                        {
                            _10870 = length(_3368) - ex_Data1.w;
                            break;
                        }
                        vec2 _4218 = abs(_3368);
                        vec2 _10865;
                        vec2 _10866;
                        if (_4218.x > _4218.y)
                        {
                            _10866 = _4218.yx;
                            _10865 = _3396.yx;
                        }
                        else
                        {
                            _10866 = _4218;
                            _10865 = _3396;
                        }
                        float _4240 = (_10865.y * _10865.y) - (_10865.x * _10865.x);
                        float _4247 = (_10865.x * _10866.x) / _4240;
                        float _4254 = (_10865.y * _10866.y) / _4240;
                        float _4257 = _4247 * _4247;
                        float _4260 = _4254 * _4254;
                        float _4264 = (_4257 + _4260) - 1.0;
                        float _4265 = _4264 * 0.3333333432674407958984375;
                        float _4270 = (_4265 * _4265) * _4265;
                        float _4274 = _4257 * _4260;
                        float _4276 = _4270 + (_4274 * 2.0);
                        float _4281 = _4270 + _4274;
                        float _4286 = _4247 + (_4247 * _4260);
                        float _10867;
                        if (_4281 < 0.0)
                        {
                            float _4294 = acos(_4276 / _4270) * 0.3333333432674407958984375;
                            float _4296 = cos(_4294);
                            float _4299 = sin(_4294) * 1.73205077648162841796875;
                            float _4301 = _4264 * (-0.3333333432674407958984375);
                            float _4309 = sqrt((_4301 * ((_4296 + _4299) + 2.0)) + _4257);
                            float _4319 = sqrt((_4301 * ((_4296 - _4299) + 2.0)) + _4257);
                            _10867 = (((_4319 + (sign(_4240) * _4309)) + (abs(_4286) / (_4309 * _4319))) - _4247) * 0.5;
                        }
                        else
                        {
                            float _4343 = ((2.0 * _4247) * _4254) * sqrt(_4281);
                            float _4346 = _4276 + _4343;
                            float _4353 = sign(_4346) * pow(abs(_4346), 0.3333333432674407958984375);
                            float _4356 = _4276 - _4343;
                            float _4363 = sign(_4356) * pow(abs(_4356), 0.3333333432674407958984375);
                            float _4373 = (((-_4353) - _4363) - (_4264 * 1.33333337306976318359375)) + (2.0 * _4257);
                            float _4377 = (_4353 - _4363) * 1.73205077648162841796875;
                            float _4385 = sqrt((_4373 * _4373) + (_4377 * _4377));
                            _10867 = (((_4377 / sqrt(_4385 - _4373)) + ((2.0 * _4286) / _4385)) - _4247) * 0.5;
                        }
                        float _4414 = _10865.y * sqrt(1.0 - (_10867 * _10867));
                        _10870 = length(vec2(_10865.x * _10867, _4414) - _10866) * sign(_10866.y - _4414);
                        break;
                    } while(false);
                    _10895 = _10870;
                    break;
                }
                vec2 _4435 = abs(_3169) - _3215;
                _10895 = min(max(_4435.x, _4435.y), 0.0) + length(max(_4435, vec2(0.0)));
                break;
            } while(false);
            float _3176 = -_10895;
            float _4456 = smoothstep(-0.3540000021457672119140625, 0.3540000021457672119140625, _3176);
            out_Color = ex_Color * _4456;
            if (ex_Data3.x > 0.0)
            {
                vec4 _3192 = ex_Data4 * min(_4456, 1.0 - smoothstep(ex_Data3.x - 0.3540000021457672119140625, ex_Data3.x + 0.3540000021457672119140625, _3176));
                float _4502 = _3192.w;
                float _4503 = 1.0 - _4502;
                vec3 _4505 = _3192.xyz + (out_Color.xyz * _4503);
                vec4 _10213 = _10757;
                _10213.x = _4505.x;
                vec4 _10215 = _10213;
                _10215.y = _4505.y;
                vec4 _10217 = _10215;
                _10217.z = _4505.z;
                vec4 _10222 = _10217;
                _10222.w = _4502 + (out_Color.w * _4503);
                out_Color = _10222;
            }
            break;
        }
        case 8u:
        {
            bool _4558 = uint(ex_Data0.y + 0.5) != 0u;
            vec2 _4571 = ex_ObjectCoord - ex_Data4.xy;
            float _10802;
            do
            {
                vec2 _4659 = ex_Data4.zw * 0.5;
                float _4661 = _4659.x;
                float _4662 = -_4661;
                float _4665 = _4662 + ex_Data5.x;
                float _4667 = _4659.y;
                float _4668 = -_4667;
                float _4671 = _4668 + ex_Data6.x;
                vec2 _4675 = _4571 - vec2(_4665, _4671);
                bool _4681 = (ex_Data5.x * ex_Data6.x) > 0.0;
                bool _4689;
                if (_4681)
                {
                    _4689 = _4571.x < _4665;
                }
                else
                {
                    _4689 = _4681;
                }
                bool _4697;
                if (_4689)
                {
                    _4697 = _4571.y <= _4671;
                }
                else
                {
                    _4697 = _4689;
                }
                if (_4697)
                {
                    vec2 _4703 = vec2(ex_Data5.x, ex_Data6.x);
                    float _10801;
                    do
                    {
                        if (abs(ex_Data5.x - ex_Data6.x) < 0.100000001490116119384765625)
                        {
                            _10801 = length(_4675) - ex_Data5.x;
                            break;
                        }
                        vec2 _4894 = abs(_4675);
                        vec2 _10796;
                        vec2 _10797;
                        if (_4894.x > _4894.y)
                        {
                            _10797 = _4894.yx;
                            _10796 = _4703.yx;
                        }
                        else
                        {
                            _10797 = _4894;
                            _10796 = _4703;
                        }
                        float _4916 = (_10796.y * _10796.y) - (_10796.x * _10796.x);
                        float _4923 = (_10796.x * _10797.x) / _4916;
                        float _4930 = (_10796.y * _10797.y) / _4916;
                        float _4933 = _4923 * _4923;
                        float _4936 = _4930 * _4930;
                        float _4940 = (_4933 + _4936) - 1.0;
                        float _4941 = _4940 * 0.3333333432674407958984375;
                        float _4946 = (_4941 * _4941) * _4941;
                        float _4950 = _4933 * _4936;
                        float _4952 = _4946 + (_4950 * 2.0);
                        float _4957 = _4946 + _4950;
                        float _4962 = _4923 + (_4923 * _4936);
                        float _10798;
                        if (_4957 < 0.0)
                        {
                            float _4970 = acos(_4952 / _4946) * 0.3333333432674407958984375;
                            float _4972 = cos(_4970);
                            float _4975 = sin(_4970) * 1.73205077648162841796875;
                            float _4977 = _4940 * (-0.3333333432674407958984375);
                            float _4985 = sqrt((_4977 * ((_4972 + _4975) + 2.0)) + _4933);
                            float _4995 = sqrt((_4977 * ((_4972 - _4975) + 2.0)) + _4933);
                            _10798 = (((_4995 + (sign(_4916) * _4985)) + (abs(_4962) / (_4985 * _4995))) - _4923) * 0.5;
                        }
                        else
                        {
                            float _5019 = ((2.0 * _4923) * _4930) * sqrt(_4957);
                            float _5022 = _4952 + _5019;
                            float _5029 = sign(_5022) * pow(abs(_5022), 0.3333333432674407958984375);
                            float _5032 = _4952 - _5019;
                            float _5039 = sign(_5032) * pow(abs(_5032), 0.3333333432674407958984375);
                            float _5049 = (((-_5029) - _5039) - (_4940 * 1.33333337306976318359375)) + (2.0 * _4933);
                            float _5053 = (_5029 - _5039) * 1.73205077648162841796875;
                            float _5061 = sqrt((_5049 * _5049) + (_5053 * _5053));
                            _10798 = (((_5053 / sqrt(_5061 - _5049)) + ((2.0 * _4962) / _5061)) - _4923) * 0.5;
                        }
                        float _5090 = _10796.y * sqrt(1.0 - (_10798 * _10798));
                        _10801 = length(vec2(_10796.x * _10798, _5090) - _10797) * sign(_10797.y - _5090);
                        break;
                    } while(false);
                    _10802 = _10801;
                    break;
                }
                float _4711 = _4661 - ex_Data5.y;
                float _4717 = _4668 + ex_Data6.y;
                vec2 _4721 = _4571 - vec2(_4711, _4717);
                bool _4727 = (ex_Data5.y * ex_Data6.y) > 0.0;
                bool _4735;
                if (_4727)
                {
                    _4735 = _4571.x >= _4711;
                }
                else
                {
                    _4735 = _4727;
                }
                bool _4743;
                if (_4735)
                {
                    _4743 = _4571.y <= _4717;
                }
                else
                {
                    _4743 = _4735;
                }
                if (_4743)
                {
                    vec2 _4749 = vec2(ex_Data5.y, ex_Data6.y);
                    float _10793;
                    do
                    {
                        if (abs(ex_Data5.y - ex_Data6.y) < 0.100000001490116119384765625)
                        {
                            _10793 = length(_4721) - ex_Data5.y;
                            break;
                        }
                        vec2 _5150 = abs(_4721);
                        vec2 _10788;
                        vec2 _10789;
                        if (_5150.x > _5150.y)
                        {
                            _10789 = _5150.yx;
                            _10788 = _4749.yx;
                        }
                        else
                        {
                            _10789 = _5150;
                            _10788 = _4749;
                        }
                        float _5172 = (_10788.y * _10788.y) - (_10788.x * _10788.x);
                        float _5179 = (_10788.x * _10789.x) / _5172;
                        float _5186 = (_10788.y * _10789.y) / _5172;
                        float _5189 = _5179 * _5179;
                        float _5192 = _5186 * _5186;
                        float _5196 = (_5189 + _5192) - 1.0;
                        float _5197 = _5196 * 0.3333333432674407958984375;
                        float _5202 = (_5197 * _5197) * _5197;
                        float _5206 = _5189 * _5192;
                        float _5208 = _5202 + (_5206 * 2.0);
                        float _5213 = _5202 + _5206;
                        float _5218 = _5179 + (_5179 * _5192);
                        float _10790;
                        if (_5213 < 0.0)
                        {
                            float _5226 = acos(_5208 / _5202) * 0.3333333432674407958984375;
                            float _5228 = cos(_5226);
                            float _5231 = sin(_5226) * 1.73205077648162841796875;
                            float _5233 = _5196 * (-0.3333333432674407958984375);
                            float _5241 = sqrt((_5233 * ((_5228 + _5231) + 2.0)) + _5189);
                            float _5251 = sqrt((_5233 * ((_5228 - _5231) + 2.0)) + _5189);
                            _10790 = (((_5251 + (sign(_5172) * _5241)) + (abs(_5218) / (_5241 * _5251))) - _5179) * 0.5;
                        }
                        else
                        {
                            float _5275 = ((2.0 * _5179) * _5186) * sqrt(_5213);
                            float _5278 = _5208 + _5275;
                            float _5285 = sign(_5278) * pow(abs(_5278), 0.3333333432674407958984375);
                            float _5288 = _5208 - _5275;
                            float _5295 = sign(_5288) * pow(abs(_5288), 0.3333333432674407958984375);
                            float _5305 = (((-_5285) - _5295) - (_5196 * 1.33333337306976318359375)) + (2.0 * _5189);
                            float _5309 = (_5285 - _5295) * 1.73205077648162841796875;
                            float _5317 = sqrt((_5305 * _5305) + (_5309 * _5309));
                            _10790 = (((_5309 / sqrt(_5317 - _5305)) + ((2.0 * _5218) / _5317)) - _5179) * 0.5;
                        }
                        float _5346 = _10788.y * sqrt(1.0 - (_10790 * _10790));
                        _10793 = length(vec2(_10788.x * _10790, _5346) - _10789) * sign(_10789.y - _5346);
                        break;
                    } while(false);
                    _10802 = _10793;
                    break;
                }
                float _4757 = _4661 - ex_Data5.z;
                float _4762 = _4667 - ex_Data6.z;
                vec2 _4766 = _4571 - vec2(_4757, _4762);
                bool _4772 = (ex_Data5.z * ex_Data6.z) > 0.0;
                bool _4780;
                if (_4772)
                {
                    _4780 = _4571.x >= _4757;
                }
                else
                {
                    _4780 = _4772;
                }
                bool _4788;
                if (_4780)
                {
                    _4788 = _4571.y >= _4762;
                }
                else
                {
                    _4788 = _4780;
                }
                if (_4788)
                {
                    vec2 _4794 = vec2(ex_Data5.z, ex_Data6.z);
                    float _10785;
                    do
                    {
                        if (abs(ex_Data5.z - ex_Data6.z) < 0.100000001490116119384765625)
                        {
                            _10785 = length(_4766) - ex_Data5.z;
                            break;
                        }
                        vec2 _5406 = abs(_4766);
                        vec2 _10780;
                        vec2 _10781;
                        if (_5406.x > _5406.y)
                        {
                            _10781 = _5406.yx;
                            _10780 = _4794.yx;
                        }
                        else
                        {
                            _10781 = _5406;
                            _10780 = _4794;
                        }
                        float _5428 = (_10780.y * _10780.y) - (_10780.x * _10780.x);
                        float _5435 = (_10780.x * _10781.x) / _5428;
                        float _5442 = (_10780.y * _10781.y) / _5428;
                        float _5445 = _5435 * _5435;
                        float _5448 = _5442 * _5442;
                        float _5452 = (_5445 + _5448) - 1.0;
                        float _5453 = _5452 * 0.3333333432674407958984375;
                        float _5458 = (_5453 * _5453) * _5453;
                        float _5462 = _5445 * _5448;
                        float _5464 = _5458 + (_5462 * 2.0);
                        float _5469 = _5458 + _5462;
                        float _5474 = _5435 + (_5435 * _5448);
                        float _10782;
                        if (_5469 < 0.0)
                        {
                            float _5482 = acos(_5464 / _5458) * 0.3333333432674407958984375;
                            float _5484 = cos(_5482);
                            float _5487 = sin(_5482) * 1.73205077648162841796875;
                            float _5489 = _5452 * (-0.3333333432674407958984375);
                            float _5497 = sqrt((_5489 * ((_5484 + _5487) + 2.0)) + _5445);
                            float _5507 = sqrt((_5489 * ((_5484 - _5487) + 2.0)) + _5445);
                            _10782 = (((_5507 + (sign(_5428) * _5497)) + (abs(_5474) / (_5497 * _5507))) - _5435) * 0.5;
                        }
                        else
                        {
                            float _5531 = ((2.0 * _5435) * _5442) * sqrt(_5469);
                            float _5534 = _5464 + _5531;
                            float _5541 = sign(_5534) * pow(abs(_5534), 0.3333333432674407958984375);
                            float _5544 = _5464 - _5531;
                            float _5551 = sign(_5544) * pow(abs(_5544), 0.3333333432674407958984375);
                            float _5561 = (((-_5541) - _5551) - (_5452 * 1.33333337306976318359375)) + (2.0 * _5445);
                            float _5565 = (_5541 - _5551) * 1.73205077648162841796875;
                            float _5573 = sqrt((_5561 * _5561) + (_5565 * _5565));
                            _10782 = (((_5565 / sqrt(_5573 - _5561)) + ((2.0 * _5474) / _5573)) - _5435) * 0.5;
                        }
                        float _5602 = _10780.y * sqrt(1.0 - (_10782 * _10782));
                        _10785 = length(vec2(_10780.x * _10782, _5602) - _10781) * sign(_10781.y - _5602);
                        break;
                    } while(false);
                    _10802 = _10785;
                    break;
                }
                float _4803 = _4662 + ex_Data5.w;
                float _4808 = _4667 - ex_Data6.w;
                vec2 _4812 = _4571 - vec2(_4803, _4808);
                bool _4818 = (ex_Data5.w * ex_Data6.w) > 0.0;
                bool _4826;
                if (_4818)
                {
                    _4826 = _4571.x < _4803;
                }
                else
                {
                    _4826 = _4818;
                }
                bool _4834;
                if (_4826)
                {
                    _4834 = _4571.y > _4808;
                }
                else
                {
                    _4834 = _4826;
                }
                if (_4834)
                {
                    vec2 _4840 = vec2(ex_Data5.w, ex_Data6.w);
                    float _10777;
                    do
                    {
                        if (abs(ex_Data5.w - ex_Data6.w) < 0.100000001490116119384765625)
                        {
                            _10777 = length(_4812) - ex_Data5.w;
                            break;
                        }
                        vec2 _5662 = abs(_4812);
                        vec2 _10772;
                        vec2 _10773;
                        if (_5662.x > _5662.y)
                        {
                            _10773 = _5662.yx;
                            _10772 = _4840.yx;
                        }
                        else
                        {
                            _10773 = _5662;
                            _10772 = _4840;
                        }
                        float _5684 = (_10772.y * _10772.y) - (_10772.x * _10772.x);
                        float _5691 = (_10772.x * _10773.x) / _5684;
                        float _5698 = (_10772.y * _10773.y) / _5684;
                        float _5701 = _5691 * _5691;
                        float _5704 = _5698 * _5698;
                        float _5708 = (_5701 + _5704) - 1.0;
                        float _5709 = _5708 * 0.3333333432674407958984375;
                        float _5714 = (_5709 * _5709) * _5709;
                        float _5718 = _5701 * _5704;
                        float _5720 = _5714 + (_5718 * 2.0);
                        float _5725 = _5714 + _5718;
                        float _5730 = _5691 + (_5691 * _5704);
                        float _10774;
                        if (_5725 < 0.0)
                        {
                            float _5738 = acos(_5720 / _5714) * 0.3333333432674407958984375;
                            float _5740 = cos(_5738);
                            float _5743 = sin(_5738) * 1.73205077648162841796875;
                            float _5745 = _5708 * (-0.3333333432674407958984375);
                            float _5753 = sqrt((_5745 * ((_5740 + _5743) + 2.0)) + _5701);
                            float _5763 = sqrt((_5745 * ((_5740 - _5743) + 2.0)) + _5701);
                            _10774 = (((_5763 + (sign(_5684) * _5753)) + (abs(_5730) / (_5753 * _5763))) - _5691) * 0.5;
                        }
                        else
                        {
                            float _5787 = ((2.0 * _5691) * _5698) * sqrt(_5725);
                            float _5790 = _5720 + _5787;
                            float _5797 = sign(_5790) * pow(abs(_5790), 0.3333333432674407958984375);
                            float _5800 = _5720 - _5787;
                            float _5807 = sign(_5800) * pow(abs(_5800), 0.3333333432674407958984375);
                            float _5817 = (((-_5797) - _5807) - (_5708 * 1.33333337306976318359375)) + (2.0 * _5701);
                            float _5821 = (_5797 - _5807) * 1.73205077648162841796875;
                            float _5829 = sqrt((_5817 * _5817) + (_5821 * _5821));
                            _10774 = (((_5821 / sqrt(_5829 - _5817)) + ((2.0 * _5730) / _5829)) - _5691) * 0.5;
                        }
                        float _5858 = _10772.y * sqrt(1.0 - (_10774 * _10774));
                        _10777 = length(vec2(_10772.x * _10774, _5858) - _10773) * sign(_10773.y - _5858);
                        break;
                    } while(false);
                    _10802 = _10777;
                    break;
                }
                vec2 _5879 = abs(_4571) - _4659;
                _10802 = min(max(_5879.x, _5879.y), 0.0) + length(max(_5879, vec2(0.0)));
                break;
            } while(false);
            vec2 _4578 = ex_ObjectCoord - ex_Data1.xy;
            float _10847;
            do
            {
                vec2 _5909 = ex_Data1.zw * 0.5;
                float _5911 = _5909.x;
                float _5912 = -_5911;
                float _5915 = _5912 + ex_Data2.x;
                float _5917 = _5909.y;
                float _5918 = -_5917;
                float _5921 = _5918 + ex_Data3.x;
                vec2 _5925 = _4578 - vec2(_5915, _5921);
                bool _5931 = (ex_Data2.x * ex_Data3.x) > 0.0;
                bool _5939;
                if (_5931)
                {
                    _5939 = _4578.x < _5915;
                }
                else
                {
                    _5939 = _5931;
                }
                bool _5947;
                if (_5939)
                {
                    _5947 = _4578.y <= _5921;
                }
                else
                {
                    _5947 = _5939;
                }
                if (_5947)
                {
                    vec2 _5953 = vec2(ex_Data2.x, ex_Data3.x);
                    float _10846;
                    do
                    {
                        if (abs(ex_Data2.x - ex_Data3.x) < 0.100000001490116119384765625)
                        {
                            _10846 = length(_5925) - ex_Data2.x;
                            break;
                        }
                        vec2 _6144 = abs(_5925);
                        vec2 _10841;
                        vec2 _10842;
                        if (_6144.x > _6144.y)
                        {
                            _10842 = _6144.yx;
                            _10841 = _5953.yx;
                        }
                        else
                        {
                            _10842 = _6144;
                            _10841 = _5953;
                        }
                        float _6166 = (_10841.y * _10841.y) - (_10841.x * _10841.x);
                        float _6173 = (_10841.x * _10842.x) / _6166;
                        float _6180 = (_10841.y * _10842.y) / _6166;
                        float _6183 = _6173 * _6173;
                        float _6186 = _6180 * _6180;
                        float _6190 = (_6183 + _6186) - 1.0;
                        float _6191 = _6190 * 0.3333333432674407958984375;
                        float _6196 = (_6191 * _6191) * _6191;
                        float _6200 = _6183 * _6186;
                        float _6202 = _6196 + (_6200 * 2.0);
                        float _6207 = _6196 + _6200;
                        float _6212 = _6173 + (_6173 * _6186);
                        float _10843;
                        if (_6207 < 0.0)
                        {
                            float _6220 = acos(_6202 / _6196) * 0.3333333432674407958984375;
                            float _6222 = cos(_6220);
                            float _6225 = sin(_6220) * 1.73205077648162841796875;
                            float _6227 = _6190 * (-0.3333333432674407958984375);
                            float _6235 = sqrt((_6227 * ((_6222 + _6225) + 2.0)) + _6183);
                            float _6245 = sqrt((_6227 * ((_6222 - _6225) + 2.0)) + _6183);
                            _10843 = (((_6245 + (sign(_6166) * _6235)) + (abs(_6212) / (_6235 * _6245))) - _6173) * 0.5;
                        }
                        else
                        {
                            float _6269 = ((2.0 * _6173) * _6180) * sqrt(_6207);
                            float _6272 = _6202 + _6269;
                            float _6279 = sign(_6272) * pow(abs(_6272), 0.3333333432674407958984375);
                            float _6282 = _6202 - _6269;
                            float _6289 = sign(_6282) * pow(abs(_6282), 0.3333333432674407958984375);
                            float _6299 = (((-_6279) - _6289) - (_6190 * 1.33333337306976318359375)) + (2.0 * _6183);
                            float _6303 = (_6279 - _6289) * 1.73205077648162841796875;
                            float _6311 = sqrt((_6299 * _6299) + (_6303 * _6303));
                            _10843 = (((_6303 / sqrt(_6311 - _6299)) + ((2.0 * _6212) / _6311)) - _6173) * 0.5;
                        }
                        float _6340 = _10841.y * sqrt(1.0 - (_10843 * _10843));
                        _10846 = length(vec2(_10841.x * _10843, _6340) - _10842) * sign(_10842.y - _6340);
                        break;
                    } while(false);
                    _10847 = _10846;
                    break;
                }
                float _5961 = _5911 - ex_Data2.y;
                float _5967 = _5918 + ex_Data3.y;
                vec2 _5971 = _4578 - vec2(_5961, _5967);
                bool _5977 = (ex_Data2.y * ex_Data3.y) > 0.0;
                bool _5985;
                if (_5977)
                {
                    _5985 = _4578.x >= _5961;
                }
                else
                {
                    _5985 = _5977;
                }
                bool _5993;
                if (_5985)
                {
                    _5993 = _4578.y <= _5967;
                }
                else
                {
                    _5993 = _5985;
                }
                if (_5993)
                {
                    vec2 _5999 = vec2(ex_Data2.y, ex_Data3.y);
                    float _10838;
                    do
                    {
                        if (abs(ex_Data2.y - ex_Data3.y) < 0.100000001490116119384765625)
                        {
                            _10838 = length(_5971) - ex_Data2.y;
                            break;
                        }
                        vec2 _6400 = abs(_5971);
                        vec2 _10833;
                        vec2 _10834;
                        if (_6400.x > _6400.y)
                        {
                            _10834 = _6400.yx;
                            _10833 = _5999.yx;
                        }
                        else
                        {
                            _10834 = _6400;
                            _10833 = _5999;
                        }
                        float _6422 = (_10833.y * _10833.y) - (_10833.x * _10833.x);
                        float _6429 = (_10833.x * _10834.x) / _6422;
                        float _6436 = (_10833.y * _10834.y) / _6422;
                        float _6439 = _6429 * _6429;
                        float _6442 = _6436 * _6436;
                        float _6446 = (_6439 + _6442) - 1.0;
                        float _6447 = _6446 * 0.3333333432674407958984375;
                        float _6452 = (_6447 * _6447) * _6447;
                        float _6456 = _6439 * _6442;
                        float _6458 = _6452 + (_6456 * 2.0);
                        float _6463 = _6452 + _6456;
                        float _6468 = _6429 + (_6429 * _6442);
                        float _10835;
                        if (_6463 < 0.0)
                        {
                            float _6476 = acos(_6458 / _6452) * 0.3333333432674407958984375;
                            float _6478 = cos(_6476);
                            float _6481 = sin(_6476) * 1.73205077648162841796875;
                            float _6483 = _6446 * (-0.3333333432674407958984375);
                            float _6491 = sqrt((_6483 * ((_6478 + _6481) + 2.0)) + _6439);
                            float _6501 = sqrt((_6483 * ((_6478 - _6481) + 2.0)) + _6439);
                            _10835 = (((_6501 + (sign(_6422) * _6491)) + (abs(_6468) / (_6491 * _6501))) - _6429) * 0.5;
                        }
                        else
                        {
                            float _6525 = ((2.0 * _6429) * _6436) * sqrt(_6463);
                            float _6528 = _6458 + _6525;
                            float _6535 = sign(_6528) * pow(abs(_6528), 0.3333333432674407958984375);
                            float _6538 = _6458 - _6525;
                            float _6545 = sign(_6538) * pow(abs(_6538), 0.3333333432674407958984375);
                            float _6555 = (((-_6535) - _6545) - (_6446 * 1.33333337306976318359375)) + (2.0 * _6439);
                            float _6559 = (_6535 - _6545) * 1.73205077648162841796875;
                            float _6567 = sqrt((_6555 * _6555) + (_6559 * _6559));
                            _10835 = (((_6559 / sqrt(_6567 - _6555)) + ((2.0 * _6468) / _6567)) - _6429) * 0.5;
                        }
                        float _6596 = _10833.y * sqrt(1.0 - (_10835 * _10835));
                        _10838 = length(vec2(_10833.x * _10835, _6596) - _10834) * sign(_10834.y - _6596);
                        break;
                    } while(false);
                    _10847 = _10838;
                    break;
                }
                float _6007 = _5911 - ex_Data2.z;
                float _6012 = _5917 - ex_Data3.z;
                vec2 _6016 = _4578 - vec2(_6007, _6012);
                bool _6022 = (ex_Data2.z * ex_Data3.z) > 0.0;
                bool _6030;
                if (_6022)
                {
                    _6030 = _4578.x >= _6007;
                }
                else
                {
                    _6030 = _6022;
                }
                bool _6038;
                if (_6030)
                {
                    _6038 = _4578.y >= _6012;
                }
                else
                {
                    _6038 = _6030;
                }
                if (_6038)
                {
                    vec2 _6044 = vec2(ex_Data2.z, ex_Data3.z);
                    float _10830;
                    do
                    {
                        if (abs(ex_Data2.z - ex_Data3.z) < 0.100000001490116119384765625)
                        {
                            _10830 = length(_6016) - ex_Data2.z;
                            break;
                        }
                        vec2 _6656 = abs(_6016);
                        vec2 _10825;
                        vec2 _10826;
                        if (_6656.x > _6656.y)
                        {
                            _10826 = _6656.yx;
                            _10825 = _6044.yx;
                        }
                        else
                        {
                            _10826 = _6656;
                            _10825 = _6044;
                        }
                        float _6678 = (_10825.y * _10825.y) - (_10825.x * _10825.x);
                        float _6685 = (_10825.x * _10826.x) / _6678;
                        float _6692 = (_10825.y * _10826.y) / _6678;
                        float _6695 = _6685 * _6685;
                        float _6698 = _6692 * _6692;
                        float _6702 = (_6695 + _6698) - 1.0;
                        float _6703 = _6702 * 0.3333333432674407958984375;
                        float _6708 = (_6703 * _6703) * _6703;
                        float _6712 = _6695 * _6698;
                        float _6714 = _6708 + (_6712 * 2.0);
                        float _6719 = _6708 + _6712;
                        float _6724 = _6685 + (_6685 * _6698);
                        float _10827;
                        if (_6719 < 0.0)
                        {
                            float _6732 = acos(_6714 / _6708) * 0.3333333432674407958984375;
                            float _6734 = cos(_6732);
                            float _6737 = sin(_6732) * 1.73205077648162841796875;
                            float _6739 = _6702 * (-0.3333333432674407958984375);
                            float _6747 = sqrt((_6739 * ((_6734 + _6737) + 2.0)) + _6695);
                            float _6757 = sqrt((_6739 * ((_6734 - _6737) + 2.0)) + _6695);
                            _10827 = (((_6757 + (sign(_6678) * _6747)) + (abs(_6724) / (_6747 * _6757))) - _6685) * 0.5;
                        }
                        else
                        {
                            float _6781 = ((2.0 * _6685) * _6692) * sqrt(_6719);
                            float _6784 = _6714 + _6781;
                            float _6791 = sign(_6784) * pow(abs(_6784), 0.3333333432674407958984375);
                            float _6794 = _6714 - _6781;
                            float _6801 = sign(_6794) * pow(abs(_6794), 0.3333333432674407958984375);
                            float _6811 = (((-_6791) - _6801) - (_6702 * 1.33333337306976318359375)) + (2.0 * _6695);
                            float _6815 = (_6791 - _6801) * 1.73205077648162841796875;
                            float _6823 = sqrt((_6811 * _6811) + (_6815 * _6815));
                            _10827 = (((_6815 / sqrt(_6823 - _6811)) + ((2.0 * _6724) / _6823)) - _6685) * 0.5;
                        }
                        float _6852 = _10825.y * sqrt(1.0 - (_10827 * _10827));
                        _10830 = length(vec2(_10825.x * _10827, _6852) - _10826) * sign(_10826.y - _6852);
                        break;
                    } while(false);
                    _10847 = _10830;
                    break;
                }
                float _6053 = _5912 + ex_Data2.w;
                float _6058 = _5917 - ex_Data3.w;
                vec2 _6062 = _4578 - vec2(_6053, _6058);
                bool _6068 = (ex_Data2.w * ex_Data3.w) > 0.0;
                bool _6076;
                if (_6068)
                {
                    _6076 = _4578.x < _6053;
                }
                else
                {
                    _6076 = _6068;
                }
                bool _6084;
                if (_6076)
                {
                    _6084 = _4578.y > _6058;
                }
                else
                {
                    _6084 = _6076;
                }
                if (_6084)
                {
                    vec2 _6090 = vec2(ex_Data2.w, ex_Data3.w);
                    float _10822;
                    do
                    {
                        if (abs(ex_Data2.w - ex_Data3.w) < 0.100000001490116119384765625)
                        {
                            _10822 = length(_6062) - ex_Data2.w;
                            break;
                        }
                        vec2 _6912 = abs(_6062);
                        vec2 _10817;
                        vec2 _10818;
                        if (_6912.x > _6912.y)
                        {
                            _10818 = _6912.yx;
                            _10817 = _6090.yx;
                        }
                        else
                        {
                            _10818 = _6912;
                            _10817 = _6090;
                        }
                        float _6934 = (_10817.y * _10817.y) - (_10817.x * _10817.x);
                        float _6941 = (_10817.x * _10818.x) / _6934;
                        float _6948 = (_10817.y * _10818.y) / _6934;
                        float _6951 = _6941 * _6941;
                        float _6954 = _6948 * _6948;
                        float _6958 = (_6951 + _6954) - 1.0;
                        float _6959 = _6958 * 0.3333333432674407958984375;
                        float _6964 = (_6959 * _6959) * _6959;
                        float _6968 = _6951 * _6954;
                        float _6970 = _6964 + (_6968 * 2.0);
                        float _6975 = _6964 + _6968;
                        float _6980 = _6941 + (_6941 * _6954);
                        float _10819;
                        if (_6975 < 0.0)
                        {
                            float _6988 = acos(_6970 / _6964) * 0.3333333432674407958984375;
                            float _6990 = cos(_6988);
                            float _6993 = sin(_6988) * 1.73205077648162841796875;
                            float _6995 = _6958 * (-0.3333333432674407958984375);
                            float _7003 = sqrt((_6995 * ((_6990 + _6993) + 2.0)) + _6951);
                            float _7013 = sqrt((_6995 * ((_6990 - _6993) + 2.0)) + _6951);
                            _10819 = (((_7013 + (sign(_6934) * _7003)) + (abs(_6980) / (_7003 * _7013))) - _6941) * 0.5;
                        }
                        else
                        {
                            float _7037 = ((2.0 * _6941) * _6948) * sqrt(_6975);
                            float _7040 = _6970 + _7037;
                            float _7047 = sign(_7040) * pow(abs(_7040), 0.3333333432674407958984375);
                            float _7050 = _6970 - _7037;
                            float _7057 = sign(_7050) * pow(abs(_7050), 0.3333333432674407958984375);
                            float _7067 = (((-_7047) - _7057) - (_6958 * 1.33333337306976318359375)) + (2.0 * _6951);
                            float _7071 = (_7047 - _7057) * 1.73205077648162841796875;
                            float _7079 = sqrt((_7067 * _7067) + (_7071 * _7071));
                            _10819 = (((_7071 / sqrt(_7079 - _7067)) + ((2.0 * _6980) / _7079)) - _6941) * 0.5;
                        }
                        float _7108 = _10817.y * sqrt(1.0 - (_10819 * _10819));
                        _10822 = length(vec2(_10817.x * _10819, _7108) - _10818) * sign(_10818.y - _7108);
                        break;
                    } while(false);
                    _10847 = _10822;
                    break;
                }
                vec2 _7129 = abs(_4578) - _5909;
                _10847 = min(max(_7129.x, _7129.y), 0.0) + length(max(_7129, vec2(0.0)));
                break;
            } while(false);
            float _10848;
            if (_4558)
            {
                _10848 = -_10847;
            }
            else
            {
                _10848 = _10802;
            }
            float _10849;
            if (_4558)
            {
                _10849 = -_10802;
            }
            else
            {
                _10849 = _10847;
            }
            if (_10848 < 0.0)
            {
                discard;
            }
            float _10850;
            if (ex_Data0.z >= 1.0)
            {
                float _4609 = ex_Data0.z * 2.0;
                _10850 = (pow(smoothstep((-0.20000000298023223876953125) - _4609, _4609 + 0.20000000298023223876953125, -_10849), 1.89999997615814208984375) * 3.2999999523162841796875) / pow(ex_Data0.z * 1.2000000476837158203125, 0.1500000059604644775390625);
            }
            else
            {
                float _4622 = _4558 ? (-1.0) : 1.0;
                _10850 = smoothstep(_4622 - 0.3540000021457672119140625, _4622 + 0.3540000021457672119140625, -_10849);
            }
            float _4630 = clamp(_10850, 0.0, 1.0) * ex_Color.w;
            out_Color = vec4(ex_Color.xyz * _4630, _4630);
            break;
        }
        case 9u:
        {
            vec4 _10755;
            do
            {
                out_Color = texture(Texture1, ex_TexCoord) * ex_Color;
                vec4 _7196 = texture(Texture2, ex_ObjectCoord);
                bool _10754;
                vec4 _10756;
                switch (uint(ex_Data0.y + 0.5))
                {
                    case 0u:
                    {
                        _10756 = vec4(0.0);
                        _10754 = true;
                        break;
                    }
                    case 1u:
                    {
                        _10756 = out_Color;
                        _10754 = true;
                        break;
                    }
                    case 2u:
                    {
                        _10756 = out_Color + (_7196 * (1.0 - out_Color.w));
                        _10754 = true;
                        break;
                    }
                    case 3u:
                    {
                        _10756 = out_Color * _7196.w;
                        _10754 = true;
                        break;
                    }
                    case 4u:
                    {
                        _10756 = out_Color * (1.0 - _7196.w);
                        _10754 = true;
                        break;
                    }
                    case 5u:
                    {
                        _10756 = (out_Color * _7196.w) + (_7196 * (1.0 - out_Color.w));
                        _10754 = true;
                        break;
                    }
                    case 6u:
                    {
                        _10756 = (out_Color * (1.0 - _7196.w)) + _7196;
                        _10754 = true;
                        break;
                    }
                    case 7u:
                    {
                        _10756 = _7196 * out_Color.w;
                        _10754 = true;
                        break;
                    }
                    case 8u:
                    {
                        _10756 = _7196 * (1.0 - out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 9u:
                    {
                        _10756 = (out_Color * (1.0 - _7196.w)) + (_7196 * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 10u:
                    {
                        _10756 = clamp((out_Color * (1.0 - _7196.w)) + (_7196 * (1.0 - out_Color.w)), vec4(0.0), vec4(1.0));
                        _10754 = true;
                        break;
                    }
                    case 11u:
                    {
                        _10756 = vec4(min(out_Color.xyz, _7196.xyz) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 12u:
                    {
                        _10756 = clamp(out_Color + _7196, vec4(0.0), vec4(1.0));
                        _10754 = true;
                        break;
                    }
                    case 13u:
                    {
                        _10756 = vec4(abs(_7196.xyz - out_Color.xyz) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 14u:
                    {
                        _10756 = vec4((out_Color.xyz * _7196.xyz) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 15u:
                    {
                        _10756 = vec4((vec3(1.0) - ((vec3(1.0) - _7196.xyz) * (vec3(1.0) - out_Color.xyz))) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 16u:
                    {
                        vec3 _7170 = out_Color.xyz;
                        vec3 _7171 = _7196.xyz;
                        vec3 _7591;
                        for (int _10751 = 0; _10751 < 3; _10751++)
                        {
                            float _10752;
                            if (_7171[_10751] < 0.5)
                            {
                                _10752 = (2.0 * _7171[_10751]) * _7170[_10751];
                            }
                            else
                            {
                                _10752 = 1.0 - ((2.0 * (1.0 - _7171[_10751])) * (1.0 - _7170[_10751]));
                            }
                            _7591[_10751] = _10752;
                        }
                        _10756 = vec4(_7591 * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 17u:
                    {
                        _10756 = vec4(max(out_Color.xyz, _7196.xyz) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 18u:
                    {
                        vec3 _7172 = out_Color.xyz;
                        vec3 _7173 = _7196.xyz;
                        vec3 _7635;
                        for (int _10748 = 0; _10748 < 3; _10748++)
                        {
                            float _10749;
                            if (_7172[_10748] == 1.0)
                            {
                                _10749 = _7172[_10748];
                            }
                            else
                            {
                                _10749 = min(_7173[_10748] / (1.0 - _7172[_10748]), 1.0);
                            }
                            _7635[_10748] = _10749;
                        }
                        _10756 = vec4(_7635 * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 19u:
                    {
                        vec3 _7174 = out_Color.xyz;
                        vec3 _7175 = _7196.xyz;
                        vec3 _7672;
                        for (int _10745 = 0; _10745 < 3; _10745++)
                        {
                            float _10746;
                            if (_7174[_10745] == 0.0)
                            {
                                _10746 = _7174[_10745];
                            }
                            else
                            {
                                _10746 = max(1.0 - ((1.0 - _7175[_10745]) / _7174[_10745]), 0.0);
                            }
                            _7672[_10745] = _10746;
                        }
                        _10756 = vec4(_7672 * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 20u:
                    {
                        vec3 _7176 = _7196.xyz;
                        vec3 _7177 = out_Color.xyz;
                        vec3 _7710;
                        for (int _10742 = 0; _10742 < 3; _10742++)
                        {
                            float _10743;
                            if (_7177[_10742] < 0.5)
                            {
                                _10743 = (2.0 * _7177[_10742]) * _7176[_10742];
                            }
                            else
                            {
                                _10743 = 1.0 - ((2.0 * (1.0 - _7177[_10742])) * (1.0 - _7176[_10742]));
                            }
                            _7710[_10742] = _10743;
                        }
                        _10756 = vec4(_7710 * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 21u:
                    {
                        vec3 _7178 = out_Color.xyz;
                        vec3 _7179 = _7196.xyz;
                        vec3 _7754;
                        for (int _10739 = 0; _10739 < 3; _10739++)
                        {
                            float _10740;
                            if (_7178[_10739] < 0.5)
                            {
                                _10740 = ((2.0 * _7179[_10739]) * _7178[_10739]) + ((_7179[_10739] * _7179[_10739]) * (1.0 - (2.0 * _7178[_10739])));
                            }
                            else
                            {
                                _10740 = (sqrt(_7179[_10739]) * ((2.0 * _7178[_10739]) - 1.0)) + ((2.0 * _7179[_10739]) * (1.0 - _7178[_10739]));
                            }
                            _7754[_10739] = _10740;
                        }
                        _10756 = vec4(_7754 * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 22u:
                    {
                        vec3 _7471 = _7196.xyz;
                        _10756 = vec4(((_7471 + out_Color.xyz) - ((_7471 * 2.0) * out_Color.xyz)) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 23u:
                    {
                        float _7844 = _7196.x;
                        float _7846 = _7196.y;
                        float _7848 = _7196.z;
                        float _7850 = min(_7844, min(_7846, _7848));
                        float _7858 = max(_7844, max(_7846, _7848));
                        float _7899 = _7850 + _7858;
                        float _7901 = abs(_7899 - 1.0);
                        vec3 _7956 = ((step(out_Color.yxx, out_Color.xyz) * step(out_Color.zzy, out_Color.xyz)) * (vec3(0.0, 2.0, 4.0) + ((out_Color.yzx - out_Color.zxy) / vec3((max(out_Color.x, max(out_Color.y, out_Color.z)) - min(out_Color.x, min(out_Color.y, out_Color.z))) + 1.0000000116860974230803549289703e-07)))) * vec3(0.16666667163372039794921875);
                        _10756 = vec4((vec3(_7899 * 0.5) + (((clamp(abs(mod(vec3(fract(((1.0 + _7956.x) + _7956.y) + _7956.z) * 6.0) + vec3(0.0, 4.0, 2.0), vec3(6.0)) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)) - vec3(0.5)) * ((_7858 - _7850) / (1.00000011920928955078125 - _7901))) * (1.0 - _7901))) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 24u:
                    {
                        vec3 _7516 = _7196.xyz;
                        float _8042 = _7196.x;
                        float _8044 = _7196.y;
                        float _8046 = _7196.z;
                        float _8048 = min(_8042, min(_8044, _8046));
                        float _8056 = max(_8042, max(_8044, _8046));
                        vec3 _8081 = ((step(_7196.yxx, _7516) * step(_7196.zzy, _7516)) * (vec3(0.0, 2.0, 4.0) + ((_7196.yzx - _7196.zxy) / vec3((_8056 - _8048) + 1.0000000116860974230803549289703e-07)))) * vec3(0.16666667163372039794921875);
                        float _8097 = _8048 + _8056;
                        float _8121 = min(out_Color.x, min(out_Color.y, out_Color.z));
                        float _8129 = max(out_Color.x, max(out_Color.y, out_Color.z));
                        _10756 = vec4((vec3(_8097 * 0.5) + (((clamp(abs(mod(vec3(fract(((1.0 + _8081.x) + _8081.y) + _8081.z) * 6.0) + vec3(0.0, 4.0, 2.0), vec3(6.0)) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)) - vec3(0.5)) * ((_8129 - _8121) / (1.00000011920928955078125 - abs((_8121 + _8129) - 1.0)))) * (1.0 - abs(_8097 - 1.0)))) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 25u:
                    {
                        float _8246 = min(out_Color.x, min(out_Color.y, out_Color.z));
                        float _8254 = max(out_Color.x, max(out_Color.y, out_Color.z));
                        float _8272 = _8254 - _8246;
                        vec3 _8279 = ((step(out_Color.yxx, out_Color.xyz) * step(out_Color.zzy, out_Color.xyz)) * (vec3(0.0, 2.0, 4.0) + ((out_Color.yzx - out_Color.zxy) / vec3(_8272 + 1.0000000116860974230803549289703e-07)))) * vec3(0.16666667163372039794921875);
                        float _8313 = _7196.x;
                        float _8315 = _7196.y;
                        float _8317 = _7196.z;
                        float _8368 = min(_8313, min(_8315, _8317)) + max(_8313, max(_8315, _8317));
                        _10756 = vec4((vec3(_8368 * 0.5) + (((clamp(abs(mod(vec3(fract(((1.0 + _8279.x) + _8279.y) + _8279.z) * 6.0) + vec3(0.0, 4.0, 2.0), vec3(6.0)) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)) - vec3(0.5)) * (_8272 / (1.00000011920928955078125 - abs((_8246 + _8254) - 1.0)))) * (1.0 - abs(_8368 - 1.0)))) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    case 26u:
                    {
                        vec3 _7552 = _7196.xyz;
                        float _8438 = _7196.x;
                        float _8440 = _7196.y;
                        float _8442 = _7196.z;
                        float _8444 = min(_8438, min(_8440, _8442));
                        float _8452 = max(_8438, max(_8440, _8442));
                        float _8470 = _8452 - _8444;
                        vec3 _8477 = ((step(_7196.yxx, _7552) * step(_7196.zzy, _7552)) * (vec3(0.0, 2.0, 4.0) + ((_7196.yzx - _7196.zxy) / vec3(_8470 + 1.0000000116860974230803549289703e-07)))) * vec3(0.16666667163372039794921875);
                        float _8566 = min(out_Color.x, min(out_Color.y, out_Color.z)) + max(out_Color.x, max(out_Color.y, out_Color.z));
                        _10756 = vec4((vec3(_8566 * 0.5) + (((clamp(abs(mod(vec3(fract(((1.0 + _8477.x) + _8477.y) + _8477.z) * 6.0) + vec3(0.0, 4.0, 2.0), vec3(6.0)) - vec3(3.0)) - vec3(1.0), vec3(0.0), vec3(1.0)) - vec3(0.5)) * (_8470 / (1.00000011920928955078125 - abs((_8444 + _8452) - 1.0)))) * (1.0 - abs(_8566 - 1.0)))) * out_Color.w, _7196.w * out_Color.w);
                        _10754 = true;
                        break;
                    }
                    default:
                    {
                        _10756 = _10757;
                        _10754 = false;
                        break;
                    }
                }
                if (_10754)
                {
                    _10755 = _10756;
                    break;
                }
                _10755 = out_Color;
                break;
            } while(false);
            out_Color = _10755;
            break;
        }
        case 10u:
        {
            out_Color = texture(Texture1, ex_TexCoord) * ex_Color;
            out_Color *= texture(Texture2, ex_ObjectCoord).w;
            break;
        }
        case 11u:
        {
            vec4 _8649 = texture(Texture2, vec2(clamp(texture(Texture1, ex_TexCoord).x * ex_Color.w, 0.0, 1.0), ex_Data0.y));
            float _8650 = _8649.x;
            out_Color = vec4(ex_Color.xyz * _8650, _8650);
            break;
        }
    }
    for (uint _11170 = 0u; _11170 < _187.ClipSize; _11170++)
    {
        vec4 _8753 = floor(_187.Clip[_11170][1] * vec4(1.52587890625e-05));
        vec4 _8758 = floor(_187.Clip[_11170][1] - (_8753 * 65536.0));
        vec2 _8721 = (((_187.Clip[_11170][2].xy * ex_ObjectCoord.x) + (_187.Clip[_11170][2].zw * ex_ObjectCoord.y)) + _187.Clip[_11170][3].xy) - _187.Clip[_11170][0].xy;
        float _11215;
        do
        {
            vec2 _8790 = _187.Clip[_11170][0].zw * 0.5;
            float _8792 = _8790.x;
            float _8793 = -_8792;
            float _8795 = _8753.x;
            float _8796 = _8793 + _8795;
            float _8798 = _8790.y;
            float _8799 = -_8798;
            float _8801 = _8758.x;
            float _8802 = _8799 + _8801;
            vec2 _8806 = _8721 - vec2(_8796, _8802);
            bool _8812 = (_8795 * _8801) > 0.0;
            bool _8820;
            if (_8812)
            {
                _8820 = _8721.x < _8796;
            }
            else
            {
                _8820 = _8812;
            }
            bool _8828;
            if (_8820)
            {
                _8828 = _8721.y <= _8802;
            }
            else
            {
                _8828 = _8820;
            }
            if (_8828)
            {
                vec2 _8834 = vec2(_8795, _8801);
                float _11214;
                do
                {
                    if (abs(_8795 - _8801) < 0.100000001490116119384765625)
                    {
                        _11214 = length(_8806) - _8795;
                        break;
                    }
                    vec2 _9025 = abs(_8806);
                    vec2 _11209;
                    vec2 _11210;
                    if (_9025.x > _9025.y)
                    {
                        _11210 = _9025.yx;
                        _11209 = _8834.yx;
                    }
                    else
                    {
                        _11210 = _9025;
                        _11209 = _8834;
                    }
                    float _9047 = (_11209.y * _11209.y) - (_11209.x * _11209.x);
                    float _9054 = (_11209.x * _11210.x) / _9047;
                    float _9061 = (_11209.y * _11210.y) / _9047;
                    float _9064 = _9054 * _9054;
                    float _9067 = _9061 * _9061;
                    float _9071 = (_9064 + _9067) - 1.0;
                    float _9072 = _9071 * 0.3333333432674407958984375;
                    float _9077 = (_9072 * _9072) * _9072;
                    float _9081 = _9064 * _9067;
                    float _9083 = _9077 + (_9081 * 2.0);
                    float _9088 = _9077 + _9081;
                    float _9093 = _9054 + (_9054 * _9067);
                    float _11211;
                    if (_9088 < 0.0)
                    {
                        float _9101 = acos(_9083 / _9077) * 0.3333333432674407958984375;
                        float _9103 = cos(_9101);
                        float _9106 = sin(_9101) * 1.73205077648162841796875;
                        float _9108 = _9071 * (-0.3333333432674407958984375);
                        float _9116 = sqrt((_9108 * ((_9103 + _9106) + 2.0)) + _9064);
                        float _9126 = sqrt((_9108 * ((_9103 - _9106) + 2.0)) + _9064);
                        _11211 = (((_9126 + (sign(_9047) * _9116)) + (abs(_9093) / (_9116 * _9126))) - _9054) * 0.5;
                    }
                    else
                    {
                        float _9150 = ((2.0 * _9054) * _9061) * sqrt(_9088);
                        float _9153 = _9083 + _9150;
                        float _9160 = sign(_9153) * pow(abs(_9153), 0.3333333432674407958984375);
                        float _9163 = _9083 - _9150;
                        float _9170 = sign(_9163) * pow(abs(_9163), 0.3333333432674407958984375);
                        float _9180 = (((-_9160) - _9170) - (_9071 * 1.33333337306976318359375)) + (2.0 * _9064);
                        float _9184 = (_9160 - _9170) * 1.73205077648162841796875;
                        float _9192 = sqrt((_9180 * _9180) + (_9184 * _9184));
                        _11211 = (((_9184 / sqrt(_9192 - _9180)) + ((2.0 * _9093) / _9192)) - _9054) * 0.5;
                    }
                    float _9221 = _11209.y * sqrt(1.0 - (_11211 * _11211));
                    _11214 = length(vec2(_11209.x * _11211, _9221) - _11210) * sign(_11210.y - _9221);
                    break;
                } while(false);
                _11215 = _11214;
                break;
            }
            float _8841 = _8753.y;
            float _8842 = _8792 - _8841;
            float _8847 = _8758.y;
            float _8848 = _8799 + _8847;
            vec2 _8852 = _8721 - vec2(_8842, _8848);
            bool _8858 = (_8841 * _8847) > 0.0;
            bool _8866;
            if (_8858)
            {
                _8866 = _8721.x >= _8842;
            }
            else
            {
                _8866 = _8858;
            }
            bool _8874;
            if (_8866)
            {
                _8874 = _8721.y <= _8848;
            }
            else
            {
                _8874 = _8866;
            }
            if (_8874)
            {
                vec2 _8880 = vec2(_8841, _8847);
                float _11206;
                do
                {
                    if (abs(_8841 - _8847) < 0.100000001490116119384765625)
                    {
                        _11206 = length(_8852) - _8841;
                        break;
                    }
                    vec2 _9281 = abs(_8852);
                    vec2 _11201;
                    vec2 _11202;
                    if (_9281.x > _9281.y)
                    {
                        _11202 = _9281.yx;
                        _11201 = _8880.yx;
                    }
                    else
                    {
                        _11202 = _9281;
                        _11201 = _8880;
                    }
                    float _9303 = (_11201.y * _11201.y) - (_11201.x * _11201.x);
                    float _9310 = (_11201.x * _11202.x) / _9303;
                    float _9317 = (_11201.y * _11202.y) / _9303;
                    float _9320 = _9310 * _9310;
                    float _9323 = _9317 * _9317;
                    float _9327 = (_9320 + _9323) - 1.0;
                    float _9328 = _9327 * 0.3333333432674407958984375;
                    float _9333 = (_9328 * _9328) * _9328;
                    float _9337 = _9320 * _9323;
                    float _9339 = _9333 + (_9337 * 2.0);
                    float _9344 = _9333 + _9337;
                    float _9349 = _9310 + (_9310 * _9323);
                    float _11203;
                    if (_9344 < 0.0)
                    {
                        float _9357 = acos(_9339 / _9333) * 0.3333333432674407958984375;
                        float _9359 = cos(_9357);
                        float _9362 = sin(_9357) * 1.73205077648162841796875;
                        float _9364 = _9327 * (-0.3333333432674407958984375);
                        float _9372 = sqrt((_9364 * ((_9359 + _9362) + 2.0)) + _9320);
                        float _9382 = sqrt((_9364 * ((_9359 - _9362) + 2.0)) + _9320);
                        _11203 = (((_9382 + (sign(_9303) * _9372)) + (abs(_9349) / (_9372 * _9382))) - _9310) * 0.5;
                    }
                    else
                    {
                        float _9406 = ((2.0 * _9310) * _9317) * sqrt(_9344);
                        float _9409 = _9339 + _9406;
                        float _9416 = sign(_9409) * pow(abs(_9409), 0.3333333432674407958984375);
                        float _9419 = _9339 - _9406;
                        float _9426 = sign(_9419) * pow(abs(_9419), 0.3333333432674407958984375);
                        float _9436 = (((-_9416) - _9426) - (_9327 * 1.33333337306976318359375)) + (2.0 * _9320);
                        float _9440 = (_9416 - _9426) * 1.73205077648162841796875;
                        float _9448 = sqrt((_9436 * _9436) + (_9440 * _9440));
                        _11203 = (((_9440 / sqrt(_9448 - _9436)) + ((2.0 * _9349) / _9448)) - _9310) * 0.5;
                    }
                    float _9477 = _11201.y * sqrt(1.0 - (_11203 * _11203));
                    _11206 = length(vec2(_11201.x * _11203, _9477) - _11202) * sign(_11202.y - _9477);
                    break;
                } while(false);
                _11215 = _11206;
                break;
            }
            float _8887 = _8753.z;
            float _8888 = _8792 - _8887;
            float _8892 = _8758.z;
            float _8893 = _8798 - _8892;
            vec2 _8897 = _8721 - vec2(_8888, _8893);
            bool _8903 = (_8887 * _8892) > 0.0;
            bool _8911;
            if (_8903)
            {
                _8911 = _8721.x >= _8888;
            }
            else
            {
                _8911 = _8903;
            }
            bool _8919;
            if (_8911)
            {
                _8919 = _8721.y >= _8893;
            }
            else
            {
                _8919 = _8911;
            }
            if (_8919)
            {
                vec2 _8925 = vec2(_8887, _8892);
                float _11198;
                do
                {
                    if (abs(_8887 - _8892) < 0.100000001490116119384765625)
                    {
                        _11198 = length(_8897) - _8887;
                        break;
                    }
                    vec2 _9537 = abs(_8897);
                    vec2 _11193;
                    vec2 _11194;
                    if (_9537.x > _9537.y)
                    {
                        _11194 = _9537.yx;
                        _11193 = _8925.yx;
                    }
                    else
                    {
                        _11194 = _9537;
                        _11193 = _8925;
                    }
                    float _9559 = (_11193.y * _11193.y) - (_11193.x * _11193.x);
                    float _9566 = (_11193.x * _11194.x) / _9559;
                    float _9573 = (_11193.y * _11194.y) / _9559;
                    float _9576 = _9566 * _9566;
                    float _9579 = _9573 * _9573;
                    float _9583 = (_9576 + _9579) - 1.0;
                    float _9584 = _9583 * 0.3333333432674407958984375;
                    float _9589 = (_9584 * _9584) * _9584;
                    float _9593 = _9576 * _9579;
                    float _9595 = _9589 + (_9593 * 2.0);
                    float _9600 = _9589 + _9593;
                    float _9605 = _9566 + (_9566 * _9579);
                    float _11195;
                    if (_9600 < 0.0)
                    {
                        float _9613 = acos(_9595 / _9589) * 0.3333333432674407958984375;
                        float _9615 = cos(_9613);
                        float _9618 = sin(_9613) * 1.73205077648162841796875;
                        float _9620 = _9583 * (-0.3333333432674407958984375);
                        float _9628 = sqrt((_9620 * ((_9615 + _9618) + 2.0)) + _9576);
                        float _9638 = sqrt((_9620 * ((_9615 - _9618) + 2.0)) + _9576);
                        _11195 = (((_9638 + (sign(_9559) * _9628)) + (abs(_9605) / (_9628 * _9638))) - _9566) * 0.5;
                    }
                    else
                    {
                        float _9662 = ((2.0 * _9566) * _9573) * sqrt(_9600);
                        float _9665 = _9595 + _9662;
                        float _9672 = sign(_9665) * pow(abs(_9665), 0.3333333432674407958984375);
                        float _9675 = _9595 - _9662;
                        float _9682 = sign(_9675) * pow(abs(_9675), 0.3333333432674407958984375);
                        float _9692 = (((-_9672) - _9682) - (_9583 * 1.33333337306976318359375)) + (2.0 * _9576);
                        float _9696 = (_9672 - _9682) * 1.73205077648162841796875;
                        float _9704 = sqrt((_9692 * _9692) + (_9696 * _9696));
                        _11195 = (((_9696 / sqrt(_9704 - _9692)) + ((2.0 * _9605) / _9704)) - _9566) * 0.5;
                    }
                    float _9733 = _11193.y * sqrt(1.0 - (_11195 * _11195));
                    _11198 = length(vec2(_11193.x * _11195, _9733) - _11194) * sign(_11194.y - _9733);
                    break;
                } while(false);
                _11215 = _11198;
                break;
            }
            float _8933 = _8753.w;
            float _8934 = _8793 + _8933;
            float _8938 = _8758.w;
            float _8939 = _8798 - _8938;
            vec2 _8943 = _8721 - vec2(_8934, _8939);
            bool _8949 = (_8933 * _8938) > 0.0;
            bool _8957;
            if (_8949)
            {
                _8957 = _8721.x < _8934;
            }
            else
            {
                _8957 = _8949;
            }
            bool _8965;
            if (_8957)
            {
                _8965 = _8721.y > _8939;
            }
            else
            {
                _8965 = _8957;
            }
            if (_8965)
            {
                vec2 _8971 = vec2(_8933, _8938);
                float _11190;
                do
                {
                    if (abs(_8933 - _8938) < 0.100000001490116119384765625)
                    {
                        _11190 = length(_8943) - _8933;
                        break;
                    }
                    vec2 _9793 = abs(_8943);
                    vec2 _11185;
                    vec2 _11186;
                    if (_9793.x > _9793.y)
                    {
                        _11186 = _9793.yx;
                        _11185 = _8971.yx;
                    }
                    else
                    {
                        _11186 = _9793;
                        _11185 = _8971;
                    }
                    float _9815 = (_11185.y * _11185.y) - (_11185.x * _11185.x);
                    float _9822 = (_11185.x * _11186.x) / _9815;
                    float _9829 = (_11185.y * _11186.y) / _9815;
                    float _9832 = _9822 * _9822;
                    float _9835 = _9829 * _9829;
                    float _9839 = (_9832 + _9835) - 1.0;
                    float _9840 = _9839 * 0.3333333432674407958984375;
                    float _9845 = (_9840 * _9840) * _9840;
                    float _9849 = _9832 * _9835;
                    float _9851 = _9845 + (_9849 * 2.0);
                    float _9856 = _9845 + _9849;
                    float _9861 = _9822 + (_9822 * _9835);
                    float _11187;
                    if (_9856 < 0.0)
                    {
                        float _9869 = acos(_9851 / _9845) * 0.3333333432674407958984375;
                        float _9871 = cos(_9869);
                        float _9874 = sin(_9869) * 1.73205077648162841796875;
                        float _9876 = _9839 * (-0.3333333432674407958984375);
                        float _9884 = sqrt((_9876 * ((_9871 + _9874) + 2.0)) + _9832);
                        float _9894 = sqrt((_9876 * ((_9871 - _9874) + 2.0)) + _9832);
                        _11187 = (((_9894 + (sign(_9815) * _9884)) + (abs(_9861) / (_9884 * _9894))) - _9822) * 0.5;
                    }
                    else
                    {
                        float _9918 = ((2.0 * _9822) * _9829) * sqrt(_9856);
                        float _9921 = _9851 + _9918;
                        float _9928 = sign(_9921) * pow(abs(_9921), 0.3333333432674407958984375);
                        float _9931 = _9851 - _9918;
                        float _9938 = sign(_9931) * pow(abs(_9931), 0.3333333432674407958984375);
                        float _9948 = (((-_9928) - _9938) - (_9839 * 1.33333337306976318359375)) + (2.0 * _9832);
                        float _9952 = (_9928 - _9938) * 1.73205077648162841796875;
                        float _9960 = sqrt((_9948 * _9948) + (_9952 * _9952));
                        _11187 = (((_9952 / sqrt(_9960 - _9948)) + ((2.0 * _9861) / _9960)) - _9822) * 0.5;
                    }
                    float _9989 = _11185.y * sqrt(1.0 - (_11187 * _11187));
                    _11190 = length(vec2(_11185.x * _11187, _9989) - _11186) * sign(_11186.y - _9989);
                    break;
                } while(false);
                _11215 = _11190;
                break;
            }
            vec2 _10010 = abs(_8721) - _8790;
            _11215 = min(max(_10010.x, _10010.y), 0.0) + length(max(_10010, vec2(0.0)));
            break;
        } while(false);
        float _10025 = smoothstep(-0.3540000021457672119140625, 0.3540000021457672119140625, -(_11215 * ((!(_187.Clip[_11170][3].z == 0.0)) ? (-1.0) : 1.0)));
        out_Color = vec4(out_Color.xyz * _10025, out_Color.w * _10025);
    }
}

