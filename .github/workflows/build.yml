name: Build & Test
on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]
jobs:
  BuildCmake:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
    steps:
      - run: echo "todo :3"
  Build:
    needs: BuildCmake
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Build packages
        run: |
          dotnet pack src/UltralightNet.Binaries -c Release
          dotnet pack src/UltralightNet -c Release
          dotnet pack src/UltralightNet.AppCore -c Release
          dotnet pack src/UltralightNet.Resources -c Release
      - run: tree
      - name: Upload nuget packages artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nugets
          path:
          - *.nupkg
          - *.snupkg
          retention-days: 30
          if-no-files-found: error
  Test:
    needs: Build
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os : ['windows', 'ubuntu', 'macos']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100
      - name: Install missing libraries
        run: | # missing libraries workaround
          sudo add-apt-repository ppa:linuxuprising/libpng12
          sudo apt update
          sudo apt install libpng12-0
          find /usr/lib -name "libffi.so*"
          sudo ln -s  /usr/lib/x86_64-linux-gnu/libffi.so.7.1.0  /usr/lib/x86_64-linux-gnu/libffi.so.6
          sudo apt-get install libpulse0
        if: matrix.os=='ubuntu'
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: nugets
          path: ./
      - run: tree
        if: matrix.os=='ubuntu'
      - name: Test
        run: dotnet test src/UltralightNet.Test/UltralightNet.Test.csproj --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.UseSourceLink=true
        continue-on-error: true
      - name: Upload coverage
        run: |
          curl -s https://codecov.io/bash > codecov
          chmod +x codecov
          ./codecov -f "src/UltralightNet.Test/TestResults/*/coverage.opencover.xml"
      - name: Benchmark
        run: dotnet run -c Release --project src/Benchmarks/Benchmarks.csproj
        continue-on-error: true
      - name: Test
        run: dotnet test src/UltralightNet.Test/UltralightNet.Test.csproj --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.UseSourceLink=true
  Deploy:
    needs: Test
    runs-on: ubuntu-latest
    steps:
      - run: echo 1
